#!/usr/bin/env python

import argparse
import asyncio
import configparser
import cv2
import datetime
import fractions
import glob
import json
import logging
import math
import os.path
import picamera
import re
import subprocess
import sys
import time
import tornado.escape
import tornado.ioloop
import tornado.web

iso_list = (100, 200, 320, 400, 500, 640, 800)

stat_dir = os.path.normpath(os.path.join(os.path.dirname(__file__), 'static'))
img_dir = os.path.normpath(os.path.join(os.path.dirname(__file__), 'pictures'))
img_url = 'pictures/'
#img_dir  = os.path.join(os.path.expanduser('~'),'Pictures')
#name for image files
name_fmt = 'IMG_{num}'

class CameraCfg:
    camera_settings = {'shutter_speed':int, 'iso':int, 'sensor_mode':int, 'framerate':fractions.Fraction}
    main_settings = {'capture_type':str,}

    def __init__(self):
        print('Initializing camera')
        self.camera = picamera.PiCamera(
                    framerate=fractions.Fraction(1,6),
                    sensor_mode=picamera.PiCamera.EXPOSURE_MODES['night'],
                    )
        self.camera.shutter_speed = 6000000
        self.camera.iso = 800
        self.recording = False
        self.capture_type = 'video'
        self.rec_start_time = None
        self.rec_name = None

    def take_picture(self, name):
        #capture picture
        #TODO : add choice of format
        self.camera.capture(name,format='jpeg')
    
    def start_recording(self, name):
        #flag that we are recording
        self.recording = True
        #set recording name
        self.rec_name = name
        #start recording
        self.camera.start_recording(name)
        #save start time
        self.rec_start_time = time.time()
        
    def stop_recording(self):
        #flag that we are not recording
        self.recording = False
        #clear start time
        self.rec_start_time = None
        #clear file name
        file = self.rec_name
        self.rec_name = None
        #stop the recording
        self.camera.stop_recording()
        #return file name
        return file

    def get_rec_time(self):
        if not self.recording or not self.rec_start_time:
            return None
        #return elapsed time in seconds
        return self.rec_start_time - time.time()

    def save_settings(self, file):
        config = configparser.ConfigParser()

        for s in self.main_settings:
            config['DEFAULT'][s] = getattr(self, s)

        #create camera section
        config['camera'] = {}

        for s in self.camera_settings:
            attr = getattr(self.camera, s)
            config['camera'][s] = str(attr)

        # path is relative too executable
        path = os.path.join(os.path.dirname(__file__), file)

        with open(path,'wt') as fp:
            config.write(fp)

    def load_settings(self,file):

        #skip if file does not exist
        if not os.path.exists(file):
            return

        config = configparser.ConfigParser()

        config.read(file)

        for s, convert_fcn in self.main_settings.items():
            setattr(self, s, convert_fcn(config['DEFAULT'][s]))

        for s, convert_fcn in self.camera_settings.items():
            setattr(self.camera, s, convert_fcn(config['camera'][s]))

    def frame_info(self):
        try:
            dat = self.camera.frame
        except picamera.PiCameraRuntimeError:
            return None

        return dat

class PhotoRenderer:

    def __init__(self):
        self.pipe = None
        self.status = {}

    def is_running(self):
        if not self.pipe:
            return False

        return self.pipe.poll() is None

    async def data_callback(self):

        #get the IO loop
        io_loop = tornado.ioloop.IOLoop.current()
        while self.pipe.poll() is None:
            line = await io_loop.run_in_executor(None, self.pipe.stdout.readline)
            m = re.match(r'(?P<opp>Processing|Loading|Averaging|Encoding image|Scaling values|Writing)(?:\s+(?:(?:frame\s+(?P<frame>\d+))|(?:\"(?P<fname>(?:[^\"\\]|\\.)*)\")|(?:(?P<num>\d+)/(?P<denom>\d+))))?',line)
            #check if we had a match
            if m:
                stat_dict = m.groupdict()
                #convert numbers to int
                for g in ('frame','num','denom'):
                    if stat_dict[g] is not None:
                        stat_dict[g] = int(stat_dict[g])

                self.status = stat_dict
            else:
                line = line.strip()
                if line:
                    print(f'Unknown line from renderer : "{line}"')

        if self.pipe.returncode ==0:
            #render complete, update status
            self.status = {'opp' : 'Complete'}
        else:
            #render complete, update status
            self.status = {'opp' : 'An Error occured'}


    def start(self, in_name, out_name, **kwargs):

        if self.is_running():
            raise RuntimeError('A render is already running')

        #format kwargs into extra arguments
        extra_args = []
        for arg,val in kwargs.items():
            #replace underscores with dashes
            arg = arg.replace('_','-')
            #add arg name
            extra_args.append('--' + arg)
            #add arg value
            extra_args.append(str(val))


        self.status = {'opp' : 'Starting'}
        #construct args
        args = [sys.executable,
                  '-m', 'fakelongexposure', 
                  '--progress',
                  f'--output={out_name}', in_name] + extra_args

        # start rendering
        self.pipe = subprocess.Popen( args,
                                      universal_newlines=True,
                                      bufsize=1,
                                      stdin=subprocess.DEVNULL,
                                      stdout=subprocess.PIPE,
                                      )

        #get the IO loop
        io_loop = tornado.ioloop.IOLoop.current()

        #add callback for reading progress
        io_loop.spawn_callback(self.data_callback)



            
def num2name(num, ext='.jpg'):
    name = name_fmt.format(num=num) + ext
    return os.path.join(img_dir, name)

def get_pic_num():
    #list files in image dir
    files = os.listdir(img_dir)

    pic_num = 0

    for n in files:
        #search filename for image number
        m = re.search(r'IMG_(?P<num>\d+)\.[A-Za-z0-9]+',n)

        if m:
            num = int(m.group('num'))
            if num > pic_num:
                pic_num = num

    #return the first available number
    return pic_num + 1


def get_img_urls(num):
    name = name_fmt.format(num=num) + '.jpg'
    path = os.path.join(img_dir, name)
    if os.path.exists(path):
        jpg_url = '/' + img_url + name
        #TODO : check if jpg exists and create it if not
        return (jpg_url, jpg_url)
    else:
        #does not exist, return None
        return None

def get_vid_urls(num):
    #TODO: needs a lot of work here. probably needs to convert to a container format to be useable.
    raw = name_fmt.format(num=num) + '.h264'
    raw_path = os.path.join(img_dir, raw)
    #get converted path
    name = name_fmt.format(num=num) + '.mp4'
    vid_path = os.path.join(img_dir, name)
    if os.path.exists(raw_path):
        raw_url = '/' + img_url + raw
        vid_url = '/' + img_url + name
        #check if containerized video exists
        if not os.path.exists(vid_path):
            #create containerized format with ffmpeg
            cp = subprocess.run(['ffmpeg', '-nostdin', '-probesize', '10M', '-i', raw_path, '-c:v', 'copy', '-f', 'mp4', vid_path])

            if cp.returncode:
                #there was an error
                vid_url = None

        return (vid_url, raw_url)
    else:
        #does not exist, return None
        return None

def get_long_exp_urls(num):
    files = glob.iglob(os.path.join(img_dir,f'IMG_{num}_longexp*.png'))

    urls = []
    for f in files:
        _, f = os.path.split(f)

        #link to landing page
        url_p = '/long-exposure-disp.html?name=' + f
        #link to image
        url_i = img_url + f
        urls.append((url_i,url_p))


    return urls


framecount_args = [sys.executable, os.path.join(os.path.dirname(__file__), 'framecount')]

framecount_cache = {}

async def count_frames(fname):

    #check if there is a value in the dict
    if fname in framecount_cache:
        return framecount_cache[fname]

    # value not found, start dubprocess to calculate
    proc = await asyncio.subprocess.create_subprocess_exec(*framecount_args, fname,
                                             stdout=asyncio.subprocess.PIPE)

    (output, error) = await proc.communicate()

    if proc.returncode:
        raise RuntimeError('Framecount failed')

    m = re.match(r'(?P<frames>\d+) frames in file', output.decode())

    if m:
        #save value in the cache
        framecount_cache[fname] = int(m.group('frames'))
        #return value
        return framecount_cache[fname]
    else:
        raise RuntimeError(f'Error parsing framecount output : "{output.decode()}"')

def find_capture_files():
    files = os.listdir(img_dir)

    file_dict = {}

    for n in files:
        #check if it matches image name and capture parts
        m = re.match(r'(?P<base_name>IMG_(?P<num>\d+))'
                      r'(?:_(?P<extra>[A-Za-z0-9_]+))?'
                      r'\.[A-Za-z0-9]+',n)

        if m:
            if m.group('base_name') in file_dict:
                file_dict[m.group('base_name')].append(n)
            else:
                file_dict[m.group('base_name')] = [n]

    return file_dict

def img_file_comp(n):
    #check for thumbnail
    if re.match('IMG_[0-9]+_thumb.[A-Za-z0-9]',n):
        #sort twards the end
        return 100

    _, ext = os.path.splitext(n)

    ext_order = {'.h264' : 0,
                 '.mp4'  : 1,
                 '.jpg'  : 5,
                 '.png'  : 6,
                 }

    if ext in ext_order:
        return ext_order[ext]
    else:
        #unknown file, put at the end
        return 150

def generate_thumbnails(fd):

    for k,v in fd.items():
        #sort files
        v.sort(key=img_file_comp)
        if not any([re.match('IMG_[0-9]+_thumb.[A-Za-z0-9]',s) for s in v ]):
            out_path = os.path.join(img_dir ,k+'_thumb.jpg')
            src_path = os.path.join(img_dir, v[0])
            #make thumbnail from first file in the list
            subprocess.call(['ffmpeg', '-i', src_path ,
                                 '-ss', '00:00:00.000',
                                 '-vframes', '1',
                                 '-vf', 'scale=64:48',
                                 out_path])
 

class StatusHandler(tornado.web.RequestHandler):
    def initialize(self, cam, renderer):
        self.cam = cam
        self.renderer = renderer

    def set_default_headers(self):
        #status is retunded with json
        self.set_header("Content-Type", 'application/json')

    def get(self):
        stat_type = self.get_argument('type', default='frame')

        if stat_type == 'frame':
            info = self.cam.frame_info()

            if info:
                ftime = datetime.timedelta(microseconds=info.timestamp)
                resp = json.dumps({'recording': True, 'index': info.index, 'timestamp': info.timestamp, 'time': str(ftime)})
            else:
                #no frame info, fill in dummy values
                resp = json.dumps({'recording': False, 'index': 0, 'timestamp': ''})
        elif stat_type == 'renderer':
            info = self.renderer.status

            resp = json.dumps(info)
        else:
            raise ValueError(f'Unknown status type : "{stat_type}"')

        self.write(resp)

class ImageDispHandler(tornado.web.RequestHandler):
    def initialize(self):
        pass

    def get(self):
        img_num = self.get_argument('img', default=None)

        if img_num is None:
            self.redirect(r'/gallery.html')
        else:
            url = get_img_urls(int(img_num))

            if url:
                jpg_name, raw_name = url

                jpg_url = jpg_name

                self.render('image.html',img_url=jpg_url)
            else:
                #TODO : give some sort of error here?
                self.redirect(r'/gallery.html')

class VideoDispHandler(tornado.web.RequestHandler):
    def initialize(self):
        pass

    def get(self):
        vid_num = self.get_argument('vid', default=None)

        if vid_num is None:
            self.redirect(r'/gallery.html')
        else:
            url = get_vid_urls(int(vid_num))

            lexp_urls = get_long_exp_urls(vid_num)

            if url:
                vid_url, raw_url = url

                self.render('vidpreview.html',vid_url=vid_url, raw_url=raw_url, stills=lexp_urls)
            else:
                #TODO : give some sort of error here?
                self.redirect(r'/gallery.html')

class FakeExposureSettingsHandler(tornado.web.RequestHandler):
    async def get(self):
        vid_url = self.get_argument('vid', default=None)

        if vid_url is None:
            self.redirect(r'/gallery.html')
        else:

            vid_path = os.path.join(img_dir, os.path.relpath(vid_url, '/'+img_url))

            if not os.path.exists(vid_path):
                raise RuntimeError(f'Video path "{vid_path}" does not exist')

            #get the number of frames in the video
            vid_frames = await count_frames(vid_path)

            start = self.get_argument('start', default=0)
            end = self.get_argument('end', default=vid_frames)
            fcount  = self.get_argument('fcount', default=1)

            self.render(r'fake-exposure-settings.html', src_url=vid_url, max_frames=vid_frames, start=start, end=end, fcount=fcount)

class FakeExposureRenderHandler(tornado.web.RequestHandler):
    def initialize(self, renderer):
        self.renderer = renderer

    async def get(self):
        vid_url = self.get_argument('vid', default=None)

        if vid_url is None:
            self.redirect(r'/gallery.html')
        else:

            vid_path = os.path.normpath(os.path.join(img_dir, os.path.relpath(vid_url, '/'+img_url)))

            if not os.path.exists(vid_path):
                raise RuntimeError(f'Video path "{vid_path}" does not exist')

            #get the number of frames in the video
            vid_frames = await count_frames(vid_path)

            start = self.get_argument('start', default=0)
            end = self.get_argument('end', vid_frames)
            fcount  = self.get_argument('fcount', default=1)

            #make sure that there are frames that get used
            if int(start) >= int(end):
                raise RuntimeError('Start frame must be lower than end frame')

            _, tail = os.path.split(vid_path)
            name, _ = os.path.splitext(tail)

            out_name = f'{name}_longexp_f{fcount}_s{start}_e{end}.png'
            out_path = os.path.join(img_dir, out_name)

            self.renderer.start(vid_path, out_path, fcount=fcount, start_frame=start, end_frame=end)

            self.render(r'fake-exposure-rendering.html', out_name=out_name, frames=vid_frames)

def lexp_params(n):
    '''
    Extract parameters from long exposure file name.
    '''
    m = re.match('IMG_(?P<num>[0-9]+)_longexp_f(?P<fcount>\d+)_s(?P<start>\d+)_e(?P<end>\d+)', n)

    if m:
        params = m.groupdict()

        for k, v in params.items():
            params[k] = int(v)
        return params
    else:
        return -1

#handler for rendered fake long exposure pictures
class LongExposureHandler(tornado.web.RequestHandler):
    def initialize(self):
        pass

    def get(self):
        pict_name = self.get_argument('name', default=None)

        if pict_name is None:
            self.redirect(r'/gallery.html')
        else:

            lp = lexp_params(pict_name)

            if lp == -1:
                raise RuntimeError(f'Unable to determine picture number from "{pict_name}"')

            url = f'/fake-exposure-settings.html?vid=/pictures/IMG_{lp["num"]}.h264&fcount={lp["fcount"]}&start={lp["start"]}&end={lp["end"]}'

            self.render(r'long-exposure-disp.html', name=pict_name, vid_num=lp['num'], render_url=url)

def img_num(n):
    m = re.match('IMG_(?P<num>[0-9]+)', n)

    if m:
        return int(m.group('num'))
    else:
        return -1


class GalleryHandler(tornado.web.RequestHandler):

    def get(self):

        file_dict = find_capture_files()

        #generate thumbnails
        generate_thumbnails(file_dict)

        #get list of image names
        img_lst = list(file_dict.keys())
        #sort list
        img_lst.sort(key=img_num)

        img_urls = []
        for img in img_lst:
            #extract number from image name
            m = re.match(r'IMG_(?P<num>\d+)',img)
            #check that we matched
            if not m:
                raise RuntimeError(f'Bad image name "{img}"')
            #convert to integer
            img_n = int(m.group('num'))
            #get the list of files for this image/video
            files = file_dict[img]
            #sort videos first
            files.sort(key=img_file_comp)
            #get the first in the list
            first_f = files[0]
            #get extension
            _, ext_first = os.path.splitext(first_f)
            #check for video file
            if ext_first in ('.h264', '.mp4'):
                #add video preview URL
                img_urls.append(f'vidpreview.html?vid={img_n}')
            else:
                #otherwise this is a still file
                #TODO : verify?
                img_urls.append(f'image.html?img={img_n}')


        self.render('gallery.html', images=img_lst, urls=img_urls)


class VideoCapHandler(tornado.web.RequestHandler):
    def initialize(self, cam):
        self.cam = cam

    def get(self):

        self.render('video.html')

    def post(self):

        #get action
        action = self.get_body_argument('action')

        if action == 'stop':
            if self.cam.recording :
                file_name = self.cam.stop_recording()

                m = re.search(r'IMG_(?P<num>\d+)\.[A-Za-z0-9]+',file_name)

                if not m:
                    raise RuntimeError(f'Unable to find image number in : "{file_name}"')
                
                file_num = m.group('num')

                self.redirect(r'/vidpreview.html?vid=' + file_num)
            else:
                self.redirect(r'/gallery.html')
        else:
            #unknown action
            raise RuntimeError(f'Invalid action : "{action}"')

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('index.html')

class SettingsHandler(tornado.web.RequestHandler):
    def initialize(self,cam):
        self.cam = cam

    def get(self):

        #check if we are recording
        if self.cam.recording:
            self.redirect(r'/video.html')
            return

        frame_r = float(self.cam.camera.framerate)

        #get shutter speed
        shutter = round(self.cam.camera.shutter_speed, 6)

        self.render('settings.html',
                        capture_type=self.cam.capture_type, 
                        iso=self.cam.camera.iso,
                        isos=iso_list,
                        mode=self.cam.camera.sensor_mode,
                        shutter=shutter,
                        resolution=self.cam.camera.resolution,
                        frame_r=frame_r,
                        awb_mode=self.cam.camera.awb_mode,
                        awb_gain=self.cam.camera.awb_gains,
                   )

    def post(self):
        #get action
        action = self.get_body_argument('action')

        #update settings
        #get capture type
        self.cam.capture_type =  self.get_body_argument('capture-type')
        #get ISO
        iso = int(self.get_body_argument('iso'))
        #set ISO
        self.cam.camera.iso = iso

        #get mode
        mode = int(self.get_body_argument('mode'))
        #set mode
        self.cam.camera.sensor_mode = mode

        #get AWB mode
        awb_mode = self.get_body_argument('awb_mode')
        #set mode
        self.cam.camera.awb_mode = awb_mode

        if self.cam.camera.awb_mode == 'off':
            #get AWB red gain
            awb_red = fractions.Fraction(self.get_body_argument('awb_red'))
            #get AWB blue gain
            awb_blue = fractions.Fraction(self.get_body_argument('awb_blue'))
            #set AWB gain
            self.cam.camera.awb_gains = (awb_red, awb_blue)


        #get shutter speed
        shutter = float(self.get_body_argument('shutter'))
        #set shutter speed
        self.cam.camera.shutter_speed = int(shutter)

        #get frame rate
        frame_r = float(self.get_body_argument('frame_r'))
        frame = fractions.Fraction(frame_r)
        #set frame rate
        self.cam.camera.framerate = frame


        #check if we should take a picture
        if action == 'Capture':
            #shutter speed
            shutter_speed = self.cam.camera.shutter_speed*1e-6
            #get redirect time
            redir_time = math.ceil(shutter_speed)
            if self.cam.capture_type == 'video':
                #generate unique file name
                pic_num = get_pic_num()
                pic_name = num2name(pic_num, ext='.h264')
                #capture video
                self.cam.start_recording(pic_name)
                #redirect to video capture page
                self.redirect(r'/video.html')
            elif self.cam.capture_type == 'still':
                #generate unique file name
                pic_num = get_pic_num()
                pic_name = num2name(pic_num)
                if shutter_speed<1:
                    #redirect to image page
                    self.redirect(f'/image.html?img={pic_num}')
                else:
                    #render redirect page
                    self.render('redirect.html',
                                time=redir_time,
                                picture=pic_num,
                               )
                # take a picture here...
                self.cam.take_picture(pic_name)
            else:
                raise RuntimeError(f'Unknown capture_type "{self.cam.capture_type}"')
        elif action == 'Save':
            #save settings to file
            self.cam.save_settings('settings.cfg')
            self.redirect(r'/settings.html')
        else:
            raise RuntimeError(f'Unknown action "{action}"')

class Application(tornado.web.Application):
    def __init__(self, cam, renderer, *args, **kwargs):
        handlers = [(r"/index", IndexHandler),
                    (r"/index\.html", IndexHandler),
                    (r"/home\.html", IndexHandler),
                    (r"/home", IndexHandler),
                    (r"/settings\.html", SettingsHandler,{'cam':cam}),
                    (r"/settings", SettingsHandler,{'cam':cam}),
                    (r"/image.html", ImageDispHandler),
                    (r"/video.html", VideoCapHandler,{'cam':cam}),
                    (r"/vidpreview.html", VideoDispHandler),
                    (r"/fake-exposure-settings.html", FakeExposureSettingsHandler),
                    (r"/fake-exposure-settings", FakeExposureSettingsHandler),
                    (r"/fake-exposure-render", FakeExposureRenderHandler, {'renderer':renderer}),
                    (r"/fake-exposure-render.html", FakeExposureRenderHandler, {'renderer':renderer}),
                    (r"/long-exposure-disp.html", LongExposureHandler ),
                    (r"/gallery.html", GalleryHandler),
                    (r"/status", StatusHandler,{'cam':cam, 'renderer':renderer}),
                    (r"/", IndexHandler),
                    (r"/" + img_url + "(.*)", tornado.web.StaticFileHandler, {'path': img_dir}),
                ]
        super(Application, self).__init__(handlers, *args, **kwargs)

def start_application():
    parser = argparse.ArgumentParser(description='Web application for camera control')
    parser.add_argument('-p','--port',default=8888,type=int,help='port to listen to')
    parser.add_argument('--debug',action='store_true',help='print additional debug info')

    if not os.path.exists(img_dir):
        print(f'Creating image directory at {img_dir}')
        #make image directory
        os.makedirs(img_dir, exist_ok=True)


    args = parser.parse_args()

    cam = CameraCfg()

    renderer = PhotoRenderer()

    cam.load_settings('settings.cfg')


    app = Application(
                        cam, renderer,
                        template_path=os.path.join(os.path.dirname(__file__), 'templates'),
                        static_path=stat_dir,
                        debug = args.debug,
                     )
    app.listen(args.port)
    print(f'Starting server on port {args.port}')
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    start_application()

