#!/usr/bin/env python

import argparse
import fractions
import logging
import os.path
import picamera
import time
import tornado.escape
import tornado.ioloop
import tornado.web

iso_list = (100, 200, 320, 400, 500, 640, 800)

class CameraCfg:
    def __init__(self):
        print('Initializing camera')
        self.camera = picamera.PiCamera(
                    framerate=fractions.Fraction(1,6),
                    sensor_mode=picamera.PiCamera.EXPOSURE_MODES['night'],
                    )
        self.camera.shutter_speed = 6000000
        self.camera.iso = 800
        time.sleep(30)
        print('Camera ready!')

    def take_pict(slef):
        pass

class MainHandler(tornado.web.RequestHandler):
    def initialize(self,cam):
        self.cam = cam

    def get(self):
        frame = self.cam.camera.framerate

        self.render('index.html',
                        iso=self.cam.camera.iso,
                        isos=iso_list,
                        mode=self.cam.camera.sensor_mode,
                        resolution=self.cam.camera.resolution,
                        shutter=self.cam.camera.shutter_speed,
                        frame_d=frame.denominator,
                        frame_n=frame.numerator,
                   )

    def post(self):
        print(self.request.body)

        #get action
        action = self.get_body_argument('action')

        #check if we should take a picture
        if action == 'Capture':
            #TODO : generate unique file name
            pic_num = 200
            #render redirect page
            self.render('redirect.html',
                        time=math.ceil(self.cam.camera.shutter_speed),
                        picture=pic_num,
                       )
            #TODO : take a picture here...
        elif action == 'Save':
            #get ISO
            iso = int(self.get_body_argument('iso'))
            print(f'Setting ISO to : {iso}')
            #set ISO
            self.cam.camera.iso = iso

            #get mode
            mode = int(self.get_body_argument('mode'))
            print(f'Setting sensor mode to : {mode}')
            #set mode
            self.cam.camera.sensor_mode = mode

            #get shutter speed
            shutter = int(self.get_body_argument('shutter'))
            print(f'Setting shutter speed to : {shutter}')
            #set shutter speed
            self.cam.camera.shutter_speed = shutter

            #get frame rate
            frame_n = int(self.get_body_argument('frame_n'))
            frame_d = int(self.get_body_argument('frame_d'))
            frame = fractions.Fraction(frame_n, frame_d)
            print(f'Setting frame rate to : {frame}')
            #set frame rate
            self.cam.camera.framerate = frame

            self.redirect(r'/',True)

class Application(tornado.web.Application):
    def __init__(self, cam, *args, **kwargs):
        handlers = [(r"/index", MainHandler,{'cam':cam}),
                    (r"/index\.html", MainHandler,{'cam':cam}),
                    (r"/home\.html", MainHandler,{'cam':cam}),
                    (r"/home", MainHandler,{'cam':cam}),
                    (r"/", MainHandler,{'cam':cam}),
                ]
        super(Application, self).__init__(handlers, *args, **kwargs)

def start_application():
    parser = argparse.ArgumentParser(description='Web application for camera control')
    parser.add_argument('-p','--port',default=8888,type=int,help='port to listen to')
    parser.add_argument('--debug',action='store_true',help='print additional debug info')

    args = parser.parse_args()

    cam = CameraCfg()

    app = Application(
                        cam,
                        template_path=os.path.join(os.path.dirname(__file__), 'templates'),
                        static_path=os.path.join(os.path.dirname(__file__), 'static'),
                        debug = args.debug,
                     )
    app.listen(args.port)
    print(f'Starting server on port {args.port}')
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    start_application()

